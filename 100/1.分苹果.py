# A、B两个人把苹果分为两堆，A希望按照他的计算规则等分苹果，他的计算规则是按照二进制加法计算，并且不计算进位 12+5=9(1100 + 0101=9)，
# B的计算规则是十进制加法，包括正常进位，B希望在满足A的情况下获取苹果重量最多。
# 输入苹果的数量和每个苹果重量，输出满足A的情况下B获取的苹果总重量。如果无法满足A的要求，输出-1。

#输入 3
# 3 5 6
# 输出 11

# 这道题猛的一看还是挺懵的，但是仔细一看呢? 就很简单了啊!A同学的计算方式是按照二进制计算，但是不进位，这不就是异或运算吗?也就是说他想将所有苹果分成两堆，
# 且两堆的异或值相同，如果两堆的异或值相同的话，那两堆再进行异或不就是0吗?(如果不理解，再仔细琢磨琢磨) 。
# 所以，只要把所有的苹果进行异或运算，如果最终得到0，那说明可以进行平分，反之则不行。至于B想获得苹果重量最多，那我们就把最小的苹果给A不就行了。
# 因为既然所有的苹果异或为0，则说明任意一个苹果跟剩下的苹果的异或值进行异或那都是0 (不理解的，再琢磨琢磨)。
# 异或运算 (^)
# 如果两位值不同就为异，结果为1，两位值相同结果为0.0^0为0，0^1为1，1^0为1，1^1为0
num = 3
input = [3,5,6]
num = 8
input = [7258,6579,2602,6716,3050,3564,5396,1773]

res = input[0]
for i in range(1,len(input)):
    res = res^input[i]
if res!=0:
    print(-1)
else:
    total = sum(input)
    _min = min(input)
    print(total-_min)
        